// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'Hotel/Entity.dart';
import 'objectBox/Entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 1607491491677936871),
      name: 'Fournisseur',
      lastPropertyId: const obx_int.IdUid(15, 314844036761733771),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4128254359789025437),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8758188655905488373),
            name: 'qr',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(17, 2877145562524481358)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 414205311028485250),
            name: 'nom',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8919268741099517413),
            name: 'phone',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7832871292473157035),
            name: 'adresse',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 3848006787260901234),
            name: 'crudId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(14, 7929166363009161217),
            relationTarget: 'Crud'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 4779008141956767120),
            name: 'derniereModification',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 3375205513092501614),
            name: 'isSynced',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 314844036761733771),
            name: 'syncedAt',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'approvisionnements',
            srcEntity: 'Approvisionnement',
            srcField: '')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 8606136097133066204),
      name: 'Produit',
      lastPropertyId: const obx_int.IdUid(28, 8143084923991520618),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3899042760461107286),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1144798314351403869),
            name: 'qr',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(18, 7055039884597715807)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 257039154436617685),
            name: 'image',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8034655794147681628),
            name: 'nom',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 9164585532905782971),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 8989117107807645988),
            name: 'prixVente',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 8209867430423604798),
            name: 'minimStock',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 5939741701584325095),
            name: 'alertPeremption',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 756056403567528122),
            name: 'crudId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(15, 6599275986272761304),
            relationTarget: 'Crud'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(23, 6464151985494045530),
            name: 'derniereModification',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(24, 2777806409493290922),
            name: 'qrCodeList',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(25, 6126043269540820132),
            name: 'qtyPartiel',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(26, 5893296646474378066),
            name: 'pricePartielVente',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(27, 1007742783416435591),
            name: 'isSynced',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(28, 8143084923991520618),
            name: 'syncedAt',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(2, 4545419348761092860),
            name: 'qrcodes',
            targetId: const obx_int.IdUid(11, 3443064098621496820))
      ],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'approvisionnements',
            srcEntity: 'Approvisionnement',
            srcField: '')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 7968206822164606643),
      name: 'Client',
      lastPropertyId: const obx_int.IdUid(17, 8166723147148390905),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3550449193447442136),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4262833269610261032),
            name: 'qr',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 36313311528968912),
            name: 'nom',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3647177150120252920),
            name: 'phone',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8510624876376955688),
            name: 'adresse',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7948986094101501762),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 8071587812397237522),
            name: 'crudId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(11, 3197865575425084963),
            relationTarget: 'Crud'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 4136216909705007359),
            name: 'derniereModification',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 159023210248503274),
            name: 'isSynced',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 8166723147148390905),
            name: 'syncedAt',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'factures', srcEntity: 'Facture', srcField: '')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 1285774936409385946),
      name: 'Facture',
      lastPropertyId: const obx_int.IdUid(13, 1884377143891085364),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 703887304841839968),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 142214021994294718),
            name: 'qr',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 807322010398501475),
            name: 'date',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7593775792342322389),
            name: 'clientId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 7209079759549609437),
            relationTarget: 'Client'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 4377413958790530702),
            name: 'impayer',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 3233551067305536959),
            name: 'crudId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(13, 4799214949334452013),
            relationTarget: 'Crud'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 1535173712481404531),
            name: 'derniereModification',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 6592955708497446217),
            name: 'isSynced',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 1884377143891085364),
            name: 'syncedAt',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'lignesFacture', srcEntity: 'LigneFacture', srcField: '')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 615909935097060499),
      name: 'LigneFacture',
      lastPropertyId: const obx_int.IdUid(9, 1592701008287979150),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7495577581902831294),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8662175227878512386),
            name: 'produitId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 4469509526914219384),
            relationTarget: 'Produit'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2271720061750415984),
            name: 'factureId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(3, 3115440698062349467),
            relationTarget: 'Facture'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3968408471191777871),
            name: 'quantite',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2176273511660132623),
            name: 'prixUnitaire',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5597323246222841857),
            name: 'derniereModification',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 1437889204080274190),
            name: 'isSynced',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 1592701008287979150),
            name: 'syncedAt',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(7, 4476248726244800597),
      name: 'DeletedProduct',
      lastPropertyId: const obx_int.IdUid(15, 3434699105202300507),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7813442985589411931),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5897104726740693875),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3113702929616874283),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5134769009321365682),
            name: 'price',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5435292101446515439),
            name: 'quantity',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 9099144569081360726),
            name: 'delaisPeremption',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 6451279107967271452),
            name: 'crudId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(12, 7365983068633329326),
            relationTarget: 'Crud'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 1404231877362453953),
            name: 'derniereModification',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 8951242137165174450),
            name: 'isSynced',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 3434699105202300507),
            name: 'syncedAt',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(8, 4487301589449865946),
      name: 'User',
      lastPropertyId: const obx_int.IdUid(15, 5573874058535276651),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7502244617574886101),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4814196349563094451),
            name: 'photo',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2646315751348335777),
            name: 'username',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3354385379024341747),
            name: 'password',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4292417183407275029),
            name: 'email',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 3611056481111139689),
            name: 'phone',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 8617873835436875934),
            name: 'role',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 4833160626898496718),
            name: 'crudId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(19, 752249656180889003),
            relationTarget: 'Crud'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 2473173780032287588),
            name: 'derniereModification',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 8328591940079026757),
            name: 'isSynced',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 5573874058535276651),
            name: 'syncedAt',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(9, 5406683045265354164),
      name: 'Approvisionnement',
      lastPropertyId: const obx_int.IdUid(14, 6213884162894576039),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1427127697992029180),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6586041333414819153),
            name: 'quantite',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 9010323130560500227),
            name: 'datePeremption',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5002393926981366444),
            name: 'produitId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(8, 8838837656771167107),
            relationTarget: 'Produit'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5704210873674130259),
            name: 'fournisseurId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(9, 7561266591184972565),
            relationTarget: 'Fournisseur'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2585586109804824705),
            name: 'prixAchat',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 9118065618411486750),
            name: 'crudId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(10, 5642106981620853966),
            relationTarget: 'Crud'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 5497082426338993749),
            name: 'derniereModification',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 1406747372132519505),
            name: 'isSynced',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 6213884162894576039),
            name: 'syncedAt',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(10, 8291227482886202026),
      name: 'Crud',
      lastPropertyId: const obx_int.IdUid(9, 3643444017163806039),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7323118425901327966),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1206276988640976169),
            name: 'createdBy',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5202312321941210318),
            name: 'updatedBy',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4930449318114207416),
            name: 'deletedBy',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1919427341188381926),
            name: 'dateCreation',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 128479208281606900),
            name: 'derniereModification',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 4395263194595226905),
            name: 'dateDeleting',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 6753791247286746620),
            name: 'isSynced',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 3643444017163806039),
            name: 'syncedAt',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(11, 3443064098621496820),
      name: 'QrCode',
      lastPropertyId: const obx_int.IdUid(5, 799174612431273081),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 221992503793589292),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8114817508930789153),
            name: 'serial',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7892746565150206372),
            name: 'type',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7048804820784696697),
            name: 'isSynced',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 799174612431273081),
            name: 'syncedAt',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(12, 7671421685835368695),
      name: 'Locater',
      lastPropertyId: const obx_int.IdUid(2, 171507787880345142),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3360780785940250086),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 171507787880345142),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(13, 4744970031487691026),
      name: 'Reservation',
      lastPropertyId: const obx_int.IdUid(7, 5614976642409521551),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6751921859296119582),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 438694468203459940),
            name: 'roomId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2170863656777258282),
            name: 'locaterId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3974501656251074477),
            name: 'startDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 456002614587986559),
            name: 'endDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6231378526275961905),
            name: 'pricePerNight',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5614976642409521551),
            name: 'status',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(14, 1300875806629673682),
      name: 'Room',
      lastPropertyId: const obx_int.IdUid(2, 6644119797887124857),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7933457951281570386),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6644119797887124857),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(14, 1300875806629673682),
      lastIndexId: const obx_int.IdUid(19, 752249656180889003),
      lastRelationId: const obx_int.IdUid(2, 4545419348761092860),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [6647246884597588827],
      retiredIndexUids: const [
        7680843215305245682,
        720122404314208774,
        1359581493053979498
      ],
      retiredPropertyUids: const [
        8976483595831028651,
        8205124793224732825,
        4459084450102477862,
        2863238699579242918,
        6338489518372838743,
        9126168680358256829,
        7098507666294938412,
        4094610592500505256,
        2787760657972690405,
        8947335276371114795,
        6863376831137326481,
        4541506935688772376,
        789514639796378856,
        8171432931510958161,
        4584540760971899695,
        1036436451411558170,
        6987534803578766938,
        880067361688206477,
        6711389730840919433,
        2789430178740285634,
        1404650867823199132,
        7595078940008474740,
        4341932180325338788,
        9088776954073551638,
        5264206445168036661,
        6446406569798399453,
        205619321565883428,
        1827255615047715957,
        5341105790295986650,
        5607971647867899978,
        78856214289649542,
        2514304964873444278,
        78600634238338283,
        6533552764826989296,
        4773469945258199278,
        6070155937091833855,
        3618662337063473621,
        7598222863889683261,
        4130946251832316438,
        954308828359282192,
        4941871603543648876,
        6304311856860433598,
        5823148951982151747,
        8060566595666176906,
        7027322212778181854,
        6063531051077271532,
        3164935352830575671,
        510917551575483361,
        6450200723927042371,
        5959659676638121576,
        8159454970821468214
      ],
      retiredRelationUids: const [2832941486252609678],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Fournisseur: obx_int.EntityDefinition<Fournisseur>(
        model: _entities[0],
        toOneRelations: (Fournisseur object) => [object.crud],
        toManyRelations: (Fournisseur object) => {
              obx_int.RelInfo<Approvisionnement>.toOneBacklink(6, object.id,
                      (Approvisionnement srcObject) => srcObject.fournisseur):
                  object.approvisionnements
            },
        getId: (Fournisseur object) => object.id,
        setId: (Fournisseur object, int id) {
          object.id = id;
        },
        objectToFB: (Fournisseur object, fb.Builder fbb) {
          final qrOffset =
              object.qr == null ? null : fbb.writeString(object.qr!);
          final nomOffset = fbb.writeString(object.nom);
          final phoneOffset =
              object.phone == null ? null : fbb.writeString(object.phone!);
          final adresseOffset =
              object.adresse == null ? null : fbb.writeString(object.adresse!);
          fbb.startTable(16);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, qrOffset);
          fbb.addOffset(2, nomOffset);
          fbb.addOffset(3, phoneOffset);
          fbb.addOffset(4, adresseOffset);
          fbb.addInt64(10, object.crud.targetId);
          fbb.addInt64(12, object.derniereModification.millisecondsSinceEpoch);
          fbb.addBool(13, object.isSynced);
          fbb.addInt64(14, object.syncedAt.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final qrParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nomParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final phoneParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final adresseParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final derniereModificationParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0));
          final isSyncedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 30, false);
          final syncedAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 32, 0));
          final object = Fournisseur(
              id: idParam,
              qr: qrParam,
              nom: nomParam,
              phone: phoneParam,
              adresse: adresseParam,
              derniereModification: derniereModificationParam,
              isSynced: isSyncedParam,
              syncedAt: syncedAtParam);
          object.crud.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          object.crud.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<Fournisseur>(
              object.approvisionnements,
              store,
              obx_int.RelInfo<Approvisionnement>.toOneBacklink(6, object.id,
                  (Approvisionnement srcObject) => srcObject.fournisseur));
          return object;
        }),
    Produit: obx_int.EntityDefinition<Produit>(
        model: _entities[1],
        toOneRelations: (Produit object) => [object.crud],
        toManyRelations: (Produit object) => {
              obx_int.RelInfo<Produit>.toMany(2, object.id): object.qrcodes,
              obx_int.RelInfo<Approvisionnement>.toOneBacklink(5, object.id,
                      (Approvisionnement srcObject) => srcObject.produit):
                  object.approvisionnements
            },
        getId: (Produit object) => object.id,
        setId: (Produit object, int id) {
          object.id = id;
        },
        objectToFB: (Produit object, fb.Builder fbb) {
          final qrOffset =
              object.qr == null ? null : fbb.writeString(object.qr!);
          final imageOffset =
              object.image == null ? null : fbb.writeString(object.image!);
          final nomOffset = fbb.writeString(object.nom);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final qrCodeListOffset = fbb.writeList(
              object.qrCodeList.map(fbb.writeString).toList(growable: false));
          fbb.startTable(29);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, qrOffset);
          fbb.addOffset(2, imageOffset);
          fbb.addOffset(3, nomOffset);
          fbb.addOffset(4, descriptionOffset);
          fbb.addFloat64(6, object.prixVente);
          fbb.addFloat64(14, object.minimStock);
          fbb.addInt64(19, object.alertPeremption);
          fbb.addInt64(20, object.crud.targetId);
          fbb.addInt64(22, object.derniereModification.millisecondsSinceEpoch);
          fbb.addOffset(23, qrCodeListOffset);
          fbb.addFloat64(24, object.qtyPartiel);
          fbb.addFloat64(25, object.pricePartielVente);
          fbb.addBool(26, object.isSynced);
          fbb.addInt64(27, object.syncedAt.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final qrParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final imageParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final nomParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12);
          final prixVenteParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final qtyPartielParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 52);
          final pricePartielVenteParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 54);
          final minimStockParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 32);
          final alertPeremptionParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 42);
          final derniereModificationParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 48, 0));
          final isSyncedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 56, false);
          final syncedAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 58, 0));
          final object = Produit(
              id: idParam,
              qr: qrParam,
              image: imageParam,
              nom: nomParam,
              description: descriptionParam,
              prixVente: prixVenteParam,
              qtyPartiel: qtyPartielParam,
              pricePartielVente: pricePartielVenteParam,
              minimStock: minimStockParam,
              alertPeremption: alertPeremptionParam,
              derniereModification: derniereModificationParam,
              isSynced: isSyncedParam,
              syncedAt: syncedAtParam)
            ..qrCodeList = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGet(buffer, rootOffset, 50, []);
          object.crud.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 44, 0);
          object.crud.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<Produit>(object.qrcodes,
              store, obx_int.RelInfo<Produit>.toMany(2, object.id));
          obx_int.InternalToManyAccess.setRelInfo<Produit>(
              object.approvisionnements,
              store,
              obx_int.RelInfo<Approvisionnement>.toOneBacklink(5, object.id,
                  (Approvisionnement srcObject) => srcObject.produit));
          return object;
        }),
    Client: obx_int.EntityDefinition<Client>(
        model: _entities[2],
        toOneRelations: (Client object) => [object.crud],
        toManyRelations: (Client object) => {
              obx_int.RelInfo<Facture>.toOneBacklink(
                      4, object.id, (Facture srcObject) => srcObject.client):
                  object.factures
            },
        getId: (Client object) => object.id,
        setId: (Client object, int id) {
          object.id = id;
        },
        objectToFB: (Client object, fb.Builder fbb) {
          final qrOffset = fbb.writeString(object.qr);
          final nomOffset = fbb.writeString(object.nom);
          final phoneOffset = fbb.writeString(object.phone);
          final adresseOffset = fbb.writeString(object.adresse);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          fbb.startTable(18);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, qrOffset);
          fbb.addOffset(2, nomOffset);
          fbb.addOffset(3, phoneOffset);
          fbb.addOffset(4, adresseOffset);
          fbb.addOffset(5, descriptionOffset);
          fbb.addInt64(12, object.crud.targetId);
          fbb.addInt64(14, object.derniereModification.millisecondsSinceEpoch);
          fbb.addBool(15, object.isSynced);
          fbb.addInt64(16, object.syncedAt.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final qrParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final nomParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final phoneParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final adresseParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14);
          final derniereModificationParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 32, 0));
          final isSyncedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 34, false);
          final syncedAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 36, 0));
          final object = Client(
              id: idParam,
              qr: qrParam,
              nom: nomParam,
              phone: phoneParam,
              adresse: adresseParam,
              description: descriptionParam,
              derniereModification: derniereModificationParam,
              isSynced: isSyncedParam,
              syncedAt: syncedAtParam);
          object.crud.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          object.crud.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<Client>(
              object.factures,
              store,
              obx_int.RelInfo<Facture>.toOneBacklink(
                  4, object.id, (Facture srcObject) => srcObject.client));
          return object;
        }),
    Facture: obx_int.EntityDefinition<Facture>(
        model: _entities[3],
        toOneRelations: (Facture object) => [object.client, object.crud],
        toManyRelations: (Facture object) => {
              obx_int.RelInfo<LigneFacture>.toOneBacklink(3, object.id,
                      (LigneFacture srcObject) => srcObject.facture):
                  object.lignesFacture
            },
        getId: (Facture object) => object.id,
        setId: (Facture object, int id) {
          object.id = id;
        },
        objectToFB: (Facture object, fb.Builder fbb) {
          final qrOffset = fbb.writeString(object.qr);
          fbb.startTable(14);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, qrOffset);
          fbb.addInt64(2, object.date.millisecondsSinceEpoch);
          fbb.addInt64(3, object.client.targetId);
          fbb.addFloat64(7, object.impayer);
          fbb.addInt64(8, object.crud.targetId);
          fbb.addInt64(10, object.derniereModification.millisecondsSinceEpoch);
          fbb.addBool(11, object.isSynced);
          fbb.addInt64(12, object.syncedAt.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final dateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final qrParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final impayerParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 18);
          final derniereModificationParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0));
          final isSyncedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 26, false);
          final syncedAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0));
          final object = Facture(
              id: idParam,
              date: dateParam,
              qr: qrParam,
              impayer: impayerParam,
              derniereModification: derniereModificationParam,
              isSynced: isSyncedParam,
              syncedAt: syncedAtParam);
          object.client.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.client.attach(store);
          object.crud.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          object.crud.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<Facture>(
              object.lignesFacture,
              store,
              obx_int.RelInfo<LigneFacture>.toOneBacklink(
                  3, object.id, (LigneFacture srcObject) => srcObject.facture));
          return object;
        }),
    LigneFacture: obx_int.EntityDefinition<LigneFacture>(
        model: _entities[4],
        toOneRelations: (LigneFacture object) =>
            [object.produit, object.facture],
        toManyRelations: (LigneFacture object) => {},
        getId: (LigneFacture object) => object.id,
        setId: (LigneFacture object, int id) {
          object.id = id;
        },
        objectToFB: (LigneFacture object, fb.Builder fbb) {
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.produit.targetId);
          fbb.addInt64(2, object.facture.targetId);
          fbb.addFloat64(3, object.quantite);
          fbb.addFloat64(4, object.prixUnitaire);
          fbb.addInt64(6, object.derniereModification.millisecondsSinceEpoch);
          fbb.addBool(7, object.isSynced);
          fbb.addInt64(8, object.syncedAt.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final quantiteParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final prixUnitaireParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final derniereModificationParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0));
          final isSyncedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 18, false);
          final syncedAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0));
          final object = LigneFacture(
              id: idParam,
              quantite: quantiteParam,
              prixUnitaire: prixUnitaireParam,
              derniereModification: derniereModificationParam,
              isSynced: isSyncedParam,
              syncedAt: syncedAtParam);
          object.produit.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.produit.attach(store);
          object.facture.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.facture.attach(store);
          return object;
        }),
    DeletedProduct: obx_int.EntityDefinition<DeletedProduct>(
        model: _entities[5],
        toOneRelations: (DeletedProduct object) => [object.crud],
        toManyRelations: (DeletedProduct object) => {},
        getId: (DeletedProduct object) => object.id,
        setId: (DeletedProduct object, int id) {
          object.id = id;
        },
        objectToFB: (DeletedProduct object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final descriptionOffset = fbb.writeString(object.description);
          fbb.startTable(16);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addFloat64(3, object.price);
          fbb.addInt64(4, object.quantity);
          fbb.addInt64(9, object.delaisPeremption);
          fbb.addInt64(10, object.crud.targetId);
          fbb.addInt64(12, object.derniereModification.millisecondsSinceEpoch);
          fbb.addBool(13, object.isSynced);
          fbb.addInt64(14, object.syncedAt.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final priceParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final quantityParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final delaisPeremptionParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          final derniereModificationParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0));
          final isSyncedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 30, false);
          final syncedAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 32, 0));
          final object = DeletedProduct(
              name: nameParam,
              description: descriptionParam,
              price: priceParam,
              quantity: quantityParam,
              delaisPeremption: delaisPeremptionParam,
              derniereModification: derniereModificationParam,
              isSynced: isSyncedParam,
              syncedAt: syncedAtParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.crud.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          object.crud.attach(store);
          return object;
        }),
    User: obx_int.EntityDefinition<User>(
        model: _entities[6],
        toOneRelations: (User object) => [object.crud],
        toManyRelations: (User object) => {},
        getId: (User object) => object.id,
        setId: (User object, int id) {
          object.id = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final photoOffset =
              object.photo == null ? null : fbb.writeString(object.photo!);
          final usernameOffset = fbb.writeString(object.username);
          final passwordOffset = fbb.writeString(object.password);
          final emailOffset = fbb.writeString(object.email);
          final phoneOffset =
              object.phone == null ? null : fbb.writeString(object.phone!);
          final roleOffset = fbb.writeString(object.role);
          fbb.startTable(16);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, photoOffset);
          fbb.addOffset(2, usernameOffset);
          fbb.addOffset(3, passwordOffset);
          fbb.addOffset(4, emailOffset);
          fbb.addOffset(5, phoneOffset);
          fbb.addOffset(6, roleOffset);
          fbb.addInt64(11, object.crud.targetId);
          fbb.addInt64(12, object.derniereModification.millisecondsSinceEpoch);
          fbb.addBool(13, object.isSynced);
          fbb.addInt64(14, object.syncedAt.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final photoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final usernameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final passwordParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final phoneParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final roleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final derniereModificationParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0));
          final isSyncedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 30, false);
          final syncedAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 32, 0));
          final object = User(
              id: idParam,
              photo: photoParam,
              username: usernameParam,
              password: passwordParam,
              phone: phoneParam,
              email: emailParam,
              role: roleParam,
              derniereModification: derniereModificationParam,
              isSynced: isSyncedParam,
              syncedAt: syncedAtParam);
          object.crud.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          object.crud.attach(store);
          return object;
        }),
    Approvisionnement: obx_int.EntityDefinition<Approvisionnement>(
        model: _entities[7],
        toOneRelations: (Approvisionnement object) =>
            [object.produit, object.fournisseur, object.crud],
        toManyRelations: (Approvisionnement object) => {},
        getId: (Approvisionnement object) => object.id,
        setId: (Approvisionnement object, int id) {
          object.id = id;
        },
        objectToFB: (Approvisionnement object, fb.Builder fbb) {
          fbb.startTable(15);
          fbb.addInt64(0, object.id);
          fbb.addFloat64(1, object.quantite);
          fbb.addInt64(3, object.datePeremption?.millisecondsSinceEpoch);
          fbb.addInt64(4, object.produit.targetId);
          fbb.addInt64(5, object.fournisseur.targetId);
          fbb.addFloat64(6, object.prixAchat);
          fbb.addInt64(7, object.crud.targetId);
          fbb.addInt64(9, object.derniereModification?.millisecondsSinceEpoch);
          fbb.addBool(12, object.isSynced);
          fbb.addInt64(13, object.syncedAt.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final datePeremptionValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final derniereModificationValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 22);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final quantiteParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final prixAchatParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 16);
          final datePeremptionParam = datePeremptionValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(datePeremptionValue);
          final derniereModificationParam = derniereModificationValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(derniereModificationValue);
          final isSyncedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 28, false);
          final syncedAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0));
          final object = Approvisionnement(
              id: idParam,
              quantite: quantiteParam,
              prixAchat: prixAchatParam,
              datePeremption: datePeremptionParam,
              derniereModification: derniereModificationParam,
              isSynced: isSyncedParam,
              syncedAt: syncedAtParam);
          object.produit.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.produit.attach(store);
          object.fournisseur.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.fournisseur.attach(store);
          object.crud.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.crud.attach(store);
          return object;
        }),
    Crud: obx_int.EntityDefinition<Crud>(
        model: _entities[8],
        toOneRelations: (Crud object) => [],
        toManyRelations: (Crud object) => {},
        getId: (Crud object) => object.id,
        setId: (Crud object, int id) {
          object.id = id;
        },
        objectToFB: (Crud object, fb.Builder fbb) {
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.createdBy);
          fbb.addInt64(2, object.updatedBy);
          fbb.addInt64(3, object.deletedBy);
          fbb.addInt64(4, object.dateCreation?.millisecondsSinceEpoch);
          fbb.addInt64(5, object.derniereModification.millisecondsSinceEpoch);
          fbb.addInt64(6, object.dateDeleting?.millisecondsSinceEpoch);
          fbb.addBool(7, object.isSynced);
          fbb.addInt64(8, object.syncedAt.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dateCreationValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final dateDeletingValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final createdByParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final updatedByParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final deletedByParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final dateCreationParam = dateCreationValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(dateCreationValue);
          final derniereModificationParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));
          final dateDeletingParam = dateDeletingValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(dateDeletingValue);
          final isSyncedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 18, false);
          final syncedAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0));
          final object = Crud(
              id: idParam,
              createdBy: createdByParam,
              updatedBy: updatedByParam,
              deletedBy: deletedByParam,
              dateCreation: dateCreationParam,
              derniereModification: derniereModificationParam,
              dateDeleting: dateDeletingParam,
              isSynced: isSyncedParam,
              syncedAt: syncedAtParam);

          return object;
        }),
    QrCode: obx_int.EntityDefinition<QrCode>(
        model: _entities[9],
        toOneRelations: (QrCode object) => [],
        toManyRelations: (QrCode object) => {},
        getId: (QrCode object) => object.id,
        setId: (QrCode object, int id) {
          object.id = id;
        },
        objectToFB: (QrCode object, fb.Builder fbb) {
          final serialOffset = fbb.writeString(object.serial);
          final typeOffset =
              object.type == null ? null : fbb.writeString(object.type!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, serialOffset);
          fbb.addOffset(2, typeOffset);
          fbb.addBool(3, object.isSynced);
          fbb.addInt64(4, object.syncedAt.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final serialParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final isSyncedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 10, false);
          final syncedAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final object = QrCode(
              id: idParam,
              serial: serialParam,
              type: typeParam,
              isSynced: isSyncedParam,
              syncedAt: syncedAtParam);

          return object;
        }),
    Locater: obx_int.EntityDefinition<Locater>(
        model: _entities[10],
        toOneRelations: (Locater object) => [],
        toManyRelations: (Locater object) => {},
        getId: (Locater object) => object.id,
        setId: (Locater object, int id) {
          object.id = id;
        },
        objectToFB: (Locater object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = Locater(id: idParam, name: nameParam);

          return object;
        }),
    Reservation: obx_int.EntityDefinition<Reservation>(
        model: _entities[11],
        toOneRelations: (Reservation object) => [],
        toManyRelations: (Reservation object) => {},
        getId: (Reservation object) => object.id,
        setId: (Reservation object, int id) {
          object.id = id;
        },
        objectToFB: (Reservation object, fb.Builder fbb) {
          final statusOffset = fbb.writeString(object.status);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.roomId);
          fbb.addInt64(2, object.locaterId);
          fbb.addInt64(3, object.startDate.millisecondsSinceEpoch);
          fbb.addInt64(4, object.endDate.millisecondsSinceEpoch);
          fbb.addFloat64(5, object.pricePerNight);
          fbb.addOffset(6, statusOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final roomIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final locaterIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final startDateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final endDateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final pricePerNightParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final statusParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final object = Reservation(
              id: idParam,
              roomId: roomIdParam,
              locaterId: locaterIdParam,
              startDate: startDateParam,
              endDate: endDateParam,
              pricePerNight: pricePerNightParam,
              status: statusParam);

          return object;
        }),
    Room: obx_int.EntityDefinition<Room>(
        model: _entities[12],
        toOneRelations: (Room object) => [],
        toManyRelations: (Room object) => {},
        getId: (Room object) => object.id,
        setId: (Room object, int id) {
          object.id = id;
        },
        objectToFB: (Room object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = Room(id: idParam, name: nameParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Fournisseur] entity fields to define ObjectBox queries.
class Fournisseur_ {
  /// See [Fournisseur.id].
  static final id =
      obx.QueryIntegerProperty<Fournisseur>(_entities[0].properties[0]);

  /// See [Fournisseur.qr].
  static final qr =
      obx.QueryStringProperty<Fournisseur>(_entities[0].properties[1]);

  /// See [Fournisseur.nom].
  static final nom =
      obx.QueryStringProperty<Fournisseur>(_entities[0].properties[2]);

  /// See [Fournisseur.phone].
  static final phone =
      obx.QueryStringProperty<Fournisseur>(_entities[0].properties[3]);

  /// See [Fournisseur.adresse].
  static final adresse =
      obx.QueryStringProperty<Fournisseur>(_entities[0].properties[4]);

  /// See [Fournisseur.crud].
  static final crud =
      obx.QueryRelationToOne<Fournisseur, Crud>(_entities[0].properties[5]);

  /// See [Fournisseur.derniereModification].
  static final derniereModification =
      obx.QueryDateProperty<Fournisseur>(_entities[0].properties[6]);

  /// See [Fournisseur.isSynced].
  static final isSynced =
      obx.QueryBooleanProperty<Fournisseur>(_entities[0].properties[7]);

  /// See [Fournisseur.syncedAt].
  static final syncedAt =
      obx.QueryDateProperty<Fournisseur>(_entities[0].properties[8]);

  /// see [Fournisseur.approvisionnements]
  static final approvisionnements =
      obx.QueryBacklinkToMany<Approvisionnement, Fournisseur>(
          Approvisionnement_.fournisseur);
}

/// [Produit] entity fields to define ObjectBox queries.
class Produit_ {
  /// See [Produit.id].
  static final id =
      obx.QueryIntegerProperty<Produit>(_entities[1].properties[0]);

  /// See [Produit.qr].
  static final qr =
      obx.QueryStringProperty<Produit>(_entities[1].properties[1]);

  /// See [Produit.image].
  static final image =
      obx.QueryStringProperty<Produit>(_entities[1].properties[2]);

  /// See [Produit.nom].
  static final nom =
      obx.QueryStringProperty<Produit>(_entities[1].properties[3]);

  /// See [Produit.description].
  static final description =
      obx.QueryStringProperty<Produit>(_entities[1].properties[4]);

  /// See [Produit.prixVente].
  static final prixVente =
      obx.QueryDoubleProperty<Produit>(_entities[1].properties[5]);

  /// See [Produit.minimStock].
  static final minimStock =
      obx.QueryDoubleProperty<Produit>(_entities[1].properties[6]);

  /// See [Produit.alertPeremption].
  static final alertPeremption =
      obx.QueryIntegerProperty<Produit>(_entities[1].properties[7]);

  /// See [Produit.crud].
  static final crud =
      obx.QueryRelationToOne<Produit, Crud>(_entities[1].properties[8]);

  /// See [Produit.derniereModification].
  static final derniereModification =
      obx.QueryDateProperty<Produit>(_entities[1].properties[9]);

  /// See [Produit.qrCodeList].
  static final qrCodeList =
      obx.QueryStringVectorProperty<Produit>(_entities[1].properties[10]);

  /// See [Produit.qtyPartiel].
  static final qtyPartiel =
      obx.QueryDoubleProperty<Produit>(_entities[1].properties[11]);

  /// See [Produit.pricePartielVente].
  static final pricePartielVente =
      obx.QueryDoubleProperty<Produit>(_entities[1].properties[12]);

  /// See [Produit.isSynced].
  static final isSynced =
      obx.QueryBooleanProperty<Produit>(_entities[1].properties[13]);

  /// See [Produit.syncedAt].
  static final syncedAt =
      obx.QueryDateProperty<Produit>(_entities[1].properties[14]);

  /// see [Produit.qrcodes]
  static final qrcodes =
      obx.QueryRelationToMany<Produit, QrCode>(_entities[1].relations[0]);

  /// see [Produit.approvisionnements]
  static final approvisionnements =
      obx.QueryBacklinkToMany<Approvisionnement, Produit>(
          Approvisionnement_.produit);
}

/// [Client] entity fields to define ObjectBox queries.
class Client_ {
  /// See [Client.id].
  static final id =
      obx.QueryIntegerProperty<Client>(_entities[2].properties[0]);

  /// See [Client.qr].
  static final qr = obx.QueryStringProperty<Client>(_entities[2].properties[1]);

  /// See [Client.nom].
  static final nom =
      obx.QueryStringProperty<Client>(_entities[2].properties[2]);

  /// See [Client.phone].
  static final phone =
      obx.QueryStringProperty<Client>(_entities[2].properties[3]);

  /// See [Client.adresse].
  static final adresse =
      obx.QueryStringProperty<Client>(_entities[2].properties[4]);

  /// See [Client.description].
  static final description =
      obx.QueryStringProperty<Client>(_entities[2].properties[5]);

  /// See [Client.crud].
  static final crud =
      obx.QueryRelationToOne<Client, Crud>(_entities[2].properties[6]);

  /// See [Client.derniereModification].
  static final derniereModification =
      obx.QueryDateProperty<Client>(_entities[2].properties[7]);

  /// See [Client.isSynced].
  static final isSynced =
      obx.QueryBooleanProperty<Client>(_entities[2].properties[8]);

  /// See [Client.syncedAt].
  static final syncedAt =
      obx.QueryDateProperty<Client>(_entities[2].properties[9]);

  /// see [Client.factures]
  static final factures =
      obx.QueryBacklinkToMany<Facture, Client>(Facture_.client);
}

/// [Facture] entity fields to define ObjectBox queries.
class Facture_ {
  /// See [Facture.id].
  static final id =
      obx.QueryIntegerProperty<Facture>(_entities[3].properties[0]);

  /// See [Facture.qr].
  static final qr =
      obx.QueryStringProperty<Facture>(_entities[3].properties[1]);

  /// See [Facture.date].
  static final date =
      obx.QueryDateProperty<Facture>(_entities[3].properties[2]);

  /// See [Facture.client].
  static final client =
      obx.QueryRelationToOne<Facture, Client>(_entities[3].properties[3]);

  /// See [Facture.impayer].
  static final impayer =
      obx.QueryDoubleProperty<Facture>(_entities[3].properties[4]);

  /// See [Facture.crud].
  static final crud =
      obx.QueryRelationToOne<Facture, Crud>(_entities[3].properties[5]);

  /// See [Facture.derniereModification].
  static final derniereModification =
      obx.QueryDateProperty<Facture>(_entities[3].properties[6]);

  /// See [Facture.isSynced].
  static final isSynced =
      obx.QueryBooleanProperty<Facture>(_entities[3].properties[7]);

  /// See [Facture.syncedAt].
  static final syncedAt =
      obx.QueryDateProperty<Facture>(_entities[3].properties[8]);

  /// see [Facture.lignesFacture]
  static final lignesFacture =
      obx.QueryBacklinkToMany<LigneFacture, Facture>(LigneFacture_.facture);
}

/// [LigneFacture] entity fields to define ObjectBox queries.
class LigneFacture_ {
  /// See [LigneFacture.id].
  static final id =
      obx.QueryIntegerProperty<LigneFacture>(_entities[4].properties[0]);

  /// See [LigneFacture.produit].
  static final produit =
      obx.QueryRelationToOne<LigneFacture, Produit>(_entities[4].properties[1]);

  /// See [LigneFacture.facture].
  static final facture =
      obx.QueryRelationToOne<LigneFacture, Facture>(_entities[4].properties[2]);

  /// See [LigneFacture.quantite].
  static final quantite =
      obx.QueryDoubleProperty<LigneFacture>(_entities[4].properties[3]);

  /// See [LigneFacture.prixUnitaire].
  static final prixUnitaire =
      obx.QueryDoubleProperty<LigneFacture>(_entities[4].properties[4]);

  /// See [LigneFacture.derniereModification].
  static final derniereModification =
      obx.QueryDateProperty<LigneFacture>(_entities[4].properties[5]);

  /// See [LigneFacture.isSynced].
  static final isSynced =
      obx.QueryBooleanProperty<LigneFacture>(_entities[4].properties[6]);

  /// See [LigneFacture.syncedAt].
  static final syncedAt =
      obx.QueryDateProperty<LigneFacture>(_entities[4].properties[7]);
}

/// [DeletedProduct] entity fields to define ObjectBox queries.
class DeletedProduct_ {
  /// See [DeletedProduct.id].
  static final id =
      obx.QueryIntegerProperty<DeletedProduct>(_entities[5].properties[0]);

  /// See [DeletedProduct.name].
  static final name =
      obx.QueryStringProperty<DeletedProduct>(_entities[5].properties[1]);

  /// See [DeletedProduct.description].
  static final description =
      obx.QueryStringProperty<DeletedProduct>(_entities[5].properties[2]);

  /// See [DeletedProduct.price].
  static final price =
      obx.QueryDoubleProperty<DeletedProduct>(_entities[5].properties[3]);

  /// See [DeletedProduct.quantity].
  static final quantity =
      obx.QueryIntegerProperty<DeletedProduct>(_entities[5].properties[4]);

  /// See [DeletedProduct.delaisPeremption].
  static final delaisPeremption =
      obx.QueryIntegerProperty<DeletedProduct>(_entities[5].properties[5]);

  /// See [DeletedProduct.crud].
  static final crud =
      obx.QueryRelationToOne<DeletedProduct, Crud>(_entities[5].properties[6]);

  /// See [DeletedProduct.derniereModification].
  static final derniereModification =
      obx.QueryDateProperty<DeletedProduct>(_entities[5].properties[7]);

  /// See [DeletedProduct.isSynced].
  static final isSynced =
      obx.QueryBooleanProperty<DeletedProduct>(_entities[5].properties[8]);

  /// See [DeletedProduct.syncedAt].
  static final syncedAt =
      obx.QueryDateProperty<DeletedProduct>(_entities[5].properties[9]);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// See [User.id].
  static final id = obx.QueryIntegerProperty<User>(_entities[6].properties[0]);

  /// See [User.photo].
  static final photo =
      obx.QueryStringProperty<User>(_entities[6].properties[1]);

  /// See [User.username].
  static final username =
      obx.QueryStringProperty<User>(_entities[6].properties[2]);

  /// See [User.password].
  static final password =
      obx.QueryStringProperty<User>(_entities[6].properties[3]);

  /// See [User.email].
  static final email =
      obx.QueryStringProperty<User>(_entities[6].properties[4]);

  /// See [User.phone].
  static final phone =
      obx.QueryStringProperty<User>(_entities[6].properties[5]);

  /// See [User.role].
  static final role = obx.QueryStringProperty<User>(_entities[6].properties[6]);

  /// See [User.crud].
  static final crud =
      obx.QueryRelationToOne<User, Crud>(_entities[6].properties[7]);

  /// See [User.derniereModification].
  static final derniereModification =
      obx.QueryDateProperty<User>(_entities[6].properties[8]);

  /// See [User.isSynced].
  static final isSynced =
      obx.QueryBooleanProperty<User>(_entities[6].properties[9]);

  /// See [User.syncedAt].
  static final syncedAt =
      obx.QueryDateProperty<User>(_entities[6].properties[10]);
}

/// [Approvisionnement] entity fields to define ObjectBox queries.
class Approvisionnement_ {
  /// See [Approvisionnement.id].
  static final id =
      obx.QueryIntegerProperty<Approvisionnement>(_entities[7].properties[0]);

  /// See [Approvisionnement.quantite].
  static final quantite =
      obx.QueryDoubleProperty<Approvisionnement>(_entities[7].properties[1]);

  /// See [Approvisionnement.datePeremption].
  static final datePeremption =
      obx.QueryDateProperty<Approvisionnement>(_entities[7].properties[2]);

  /// See [Approvisionnement.produit].
  static final produit = obx.QueryRelationToOne<Approvisionnement, Produit>(
      _entities[7].properties[3]);

  /// See [Approvisionnement.fournisseur].
  static final fournisseur =
      obx.QueryRelationToOne<Approvisionnement, Fournisseur>(
          _entities[7].properties[4]);

  /// See [Approvisionnement.prixAchat].
  static final prixAchat =
      obx.QueryDoubleProperty<Approvisionnement>(_entities[7].properties[5]);

  /// See [Approvisionnement.crud].
  static final crud = obx.QueryRelationToOne<Approvisionnement, Crud>(
      _entities[7].properties[6]);

  /// See [Approvisionnement.derniereModification].
  static final derniereModification =
      obx.QueryDateProperty<Approvisionnement>(_entities[7].properties[7]);

  /// See [Approvisionnement.isSynced].
  static final isSynced =
      obx.QueryBooleanProperty<Approvisionnement>(_entities[7].properties[8]);

  /// See [Approvisionnement.syncedAt].
  static final syncedAt =
      obx.QueryDateProperty<Approvisionnement>(_entities[7].properties[9]);
}

/// [Crud] entity fields to define ObjectBox queries.
class Crud_ {
  /// See [Crud.id].
  static final id = obx.QueryIntegerProperty<Crud>(_entities[8].properties[0]);

  /// See [Crud.createdBy].
  static final createdBy =
      obx.QueryIntegerProperty<Crud>(_entities[8].properties[1]);

  /// See [Crud.updatedBy].
  static final updatedBy =
      obx.QueryIntegerProperty<Crud>(_entities[8].properties[2]);

  /// See [Crud.deletedBy].
  static final deletedBy =
      obx.QueryIntegerProperty<Crud>(_entities[8].properties[3]);

  /// See [Crud.dateCreation].
  static final dateCreation =
      obx.QueryDateProperty<Crud>(_entities[8].properties[4]);

  /// See [Crud.derniereModification].
  static final derniereModification =
      obx.QueryDateProperty<Crud>(_entities[8].properties[5]);

  /// See [Crud.dateDeleting].
  static final dateDeleting =
      obx.QueryDateProperty<Crud>(_entities[8].properties[6]);

  /// See [Crud.isSynced].
  static final isSynced =
      obx.QueryBooleanProperty<Crud>(_entities[8].properties[7]);

  /// See [Crud.syncedAt].
  static final syncedAt =
      obx.QueryDateProperty<Crud>(_entities[8].properties[8]);
}

/// [QrCode] entity fields to define ObjectBox queries.
class QrCode_ {
  /// See [QrCode.id].
  static final id =
      obx.QueryIntegerProperty<QrCode>(_entities[9].properties[0]);

  /// See [QrCode.serial].
  static final serial =
      obx.QueryStringProperty<QrCode>(_entities[9].properties[1]);

  /// See [QrCode.type].
  static final type =
      obx.QueryStringProperty<QrCode>(_entities[9].properties[2]);

  /// See [QrCode.isSynced].
  static final isSynced =
      obx.QueryBooleanProperty<QrCode>(_entities[9].properties[3]);

  /// See [QrCode.syncedAt].
  static final syncedAt =
      obx.QueryDateProperty<QrCode>(_entities[9].properties[4]);
}

/// [Locater] entity fields to define ObjectBox queries.
class Locater_ {
  /// See [Locater.id].
  static final id =
      obx.QueryIntegerProperty<Locater>(_entities[10].properties[0]);

  /// See [Locater.name].
  static final name =
      obx.QueryStringProperty<Locater>(_entities[10].properties[1]);
}

/// [Reservation] entity fields to define ObjectBox queries.
class Reservation_ {
  /// See [Reservation.id].
  static final id =
      obx.QueryIntegerProperty<Reservation>(_entities[11].properties[0]);

  /// See [Reservation.roomId].
  static final roomId =
      obx.QueryIntegerProperty<Reservation>(_entities[11].properties[1]);

  /// See [Reservation.locaterId].
  static final locaterId =
      obx.QueryIntegerProperty<Reservation>(_entities[11].properties[2]);

  /// See [Reservation.startDate].
  static final startDate =
      obx.QueryDateProperty<Reservation>(_entities[11].properties[3]);

  /// See [Reservation.endDate].
  static final endDate =
      obx.QueryDateProperty<Reservation>(_entities[11].properties[4]);

  /// See [Reservation.pricePerNight].
  static final pricePerNight =
      obx.QueryDoubleProperty<Reservation>(_entities[11].properties[5]);

  /// See [Reservation.status].
  static final status =
      obx.QueryStringProperty<Reservation>(_entities[11].properties[6]);
}

/// [Room] entity fields to define ObjectBox queries.
class Room_ {
  /// See [Room.id].
  static final id = obx.QueryIntegerProperty<Room>(_entities[12].properties[0]);

  /// See [Room.name].
  static final name =
      obx.QueryStringProperty<Room>(_entities[12].properties[1]);
}
