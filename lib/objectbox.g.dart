// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '1/objectBox/Entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 1607491491677936871),
      name: 'Fournisseur',
      lastPropertyId: const obx_int.IdUid(7, 9088776954073551638),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4128254359789025437),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8758188655905488373),
            name: 'qr',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 414205311028485250),
            name: 'nom',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8919268741099517413),
            name: 'phone',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7832871292473157035),
            name: 'adresse',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4341932180325338788),
            name: 'dateCreation',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 9088776954073551638),
            name: 'derniereModification',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(1, 2832941486252609678),
            name: 'produits',
            targetId: const obx_int.IdUid(2, 8606136097133066204))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 8606136097133066204),
      name: 'Produit',
      lastPropertyId: const obx_int.IdUid(15, 8209867430423604798),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3899042760461107286),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1144798314351403869),
            name: 'qr',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 257039154436617685),
            name: 'image',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8034655794147681628),
            name: 'nom',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 9164585532905782971),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6533552764826989296),
            name: 'prixAchat',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 8989117107807645988),
            name: 'prixVente',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 4773469945258199278),
            name: 'stock',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 3618662337063473621),
            name: 'stockUpdate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 7598222863889683261),
            name: 'stockinit',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 1827255615047715957),
            name: 'dateCreation',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 5341105790295986650),
            name: 'datePeremption',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 5607971647867899978),
            name: 'derniereModification',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 8209867430423604798),
            name: 'minimStock',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'fournisseurs', srcEntity: 'Fournisseur', srcField: '')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 7968206822164606643),
      name: 'Client',
      lastPropertyId: const obx_int.IdUid(7, 2787760657972690405),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3550449193447442136),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4262833269610261032),
            name: 'qr',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 36313311528968912),
            name: 'nom',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3647177150120252920),
            name: 'phone',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8510624876376955688),
            name: 'adresse',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7948986094101501762),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2787760657972690405),
            name: 'impayer',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'factures', srcEntity: 'Facture', srcField: '')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 1285774936409385946),
      name: 'Facture',
      lastPropertyId: const obx_int.IdUid(4, 7593775792342322389),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 703887304841839968),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 142214021994294718),
            name: 'qr',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 807322010398501475),
            name: 'date',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7593775792342322389),
            name: 'clientId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 7209079759549609437),
            relationTarget: 'Client')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'lignesFacture', srcEntity: 'LigneFacture', srcField: '')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 615909935097060499),
      name: 'LigneFacture',
      lastPropertyId: const obx_int.IdUid(5, 2176273511660132623),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7495577581902831294),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8662175227878512386),
            name: 'produitId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 4469509526914219384),
            relationTarget: 'Produit'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2271720061750415984),
            name: 'factureId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(3, 3115440698062349467),
            relationTarget: 'Facture'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3968408471191777871),
            name: 'quantite',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2176273511660132623),
            name: 'prixUnitaire',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(5, 615909935097060499),
      lastIndexId: const obx_int.IdUid(3, 3115440698062349467),
      lastRelationId: const obx_int.IdUid(1, 2832941486252609678),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [8976483595831028651],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Fournisseur: obx_int.EntityDefinition<Fournisseur>(
        model: _entities[0],
        toOneRelations: (Fournisseur object) => [],
        toManyRelations: (Fournisseur object) => {
              obx_int.RelInfo<Fournisseur>.toMany(1, object.id): object.produits
            },
        getId: (Fournisseur object) => object.id,
        setId: (Fournisseur object, int id) {
          object.id = id;
        },
        objectToFB: (Fournisseur object, fb.Builder fbb) {
          final qrOffset =
              object.qr == null ? null : fbb.writeString(object.qr!);
          final nomOffset = fbb.writeString(object.nom);
          final phoneOffset =
              object.phone == null ? null : fbb.writeString(object.phone!);
          final adresseOffset =
              object.adresse == null ? null : fbb.writeString(object.adresse!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, qrOffset);
          fbb.addOffset(2, nomOffset);
          fbb.addOffset(3, phoneOffset);
          fbb.addOffset(4, adresseOffset);
          fbb.addInt64(5, object.dateCreation.millisecondsSinceEpoch);
          fbb.addInt64(6, object.derniereModification?.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final derniereModificationValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final qrParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nomParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final phoneParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final adresseParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final dateCreationParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));
          final derniereModificationParam = derniereModificationValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(derniereModificationValue);
          final object = Fournisseur(
              id: idParam,
              qr: qrParam,
              nom: nomParam,
              phone: phoneParam,
              adresse: adresseParam,
              dateCreation: dateCreationParam,
              derniereModification: derniereModificationParam);
          obx_int.InternalToManyAccess.setRelInfo<Fournisseur>(object.produits,
              store, obx_int.RelInfo<Fournisseur>.toMany(1, object.id));
          return object;
        }),
    Produit: obx_int.EntityDefinition<Produit>(
        model: _entities[1],
        toOneRelations: (Produit object) => [],
        toManyRelations: (Produit object) => {
              obx_int.RelInfo<Fournisseur>.toManyBacklink(1, object.id):
                  object.fournisseurs
            },
        getId: (Produit object) => object.id,
        setId: (Produit object, int id) {
          object.id = id;
        },
        objectToFB: (Produit object, fb.Builder fbb) {
          final qrOffset =
              object.qr == null ? null : fbb.writeString(object.qr!);
          final imageOffset =
              object.image == null ? null : fbb.writeString(object.image!);
          final nomOffset = fbb.writeString(object.nom);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          fbb.startTable(16);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, qrOffset);
          fbb.addOffset(2, imageOffset);
          fbb.addOffset(3, nomOffset);
          fbb.addOffset(4, descriptionOffset);
          fbb.addFloat64(5, object.prixAchat);
          fbb.addFloat64(6, object.prixVente);
          fbb.addFloat64(7, object.stock);
          fbb.addInt64(8, object.stockUpdate?.millisecondsSinceEpoch);
          fbb.addFloat64(10, object.stockinit);
          fbb.addInt64(11, object.dateCreation?.millisecondsSinceEpoch);
          fbb.addInt64(12, object.datePeremption?.millisecondsSinceEpoch);
          fbb.addInt64(13, object.derniereModification.millisecondsSinceEpoch);
          fbb.addFloat64(14, object.minimStock);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final stockUpdateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final dateCreationValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 26);
          final datePeremptionValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 28);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final qrParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final imageParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final nomParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12);
          final prixAchatParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final prixVenteParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final stockParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 18, 0);
          final minimStockParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 32, 0);
          final dateCreationParam = dateCreationValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(dateCreationValue);
          final datePeremptionParam = datePeremptionValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(datePeremptionValue);
          final stockUpdateParam = stockUpdateValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(stockUpdateValue);
          final derniereModificationParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0));
          final stockinitParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 24, 0);
          final object = Produit(
              id: idParam,
              qr: qrParam,
              image: imageParam,
              nom: nomParam,
              description: descriptionParam,
              prixAchat: prixAchatParam,
              prixVente: prixVenteParam,
              stock: stockParam,
              minimStock: minimStockParam,
              dateCreation: dateCreationParam,
              datePeremption: datePeremptionParam,
              stockUpdate: stockUpdateParam,
              derniereModification: derniereModificationParam,
              stockinit: stockinitParam);
          obx_int.InternalToManyAccess.setRelInfo<Produit>(object.fournisseurs,
              store, obx_int.RelInfo<Fournisseur>.toManyBacklink(1, object.id));
          return object;
        }),
    Client: obx_int.EntityDefinition<Client>(
        model: _entities[2],
        toOneRelations: (Client object) => [],
        toManyRelations: (Client object) => {
              obx_int.RelInfo<Facture>.toOneBacklink(
                      4, object.id, (Facture srcObject) => srcObject.client):
                  object.factures
            },
        getId: (Client object) => object.id,
        setId: (Client object, int id) {
          object.id = id;
        },
        objectToFB: (Client object, fb.Builder fbb) {
          final qrOffset = fbb.writeString(object.qr);
          final nomOffset = fbb.writeString(object.nom);
          final phoneOffset = fbb.writeString(object.phone);
          final adresseOffset = fbb.writeString(object.adresse);
          final descriptionOffset = fbb.writeString(object.description);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, qrOffset);
          fbb.addOffset(2, nomOffset);
          fbb.addOffset(3, phoneOffset);
          fbb.addOffset(4, adresseOffset);
          fbb.addOffset(5, descriptionOffset);
          fbb.addFloat64(6, object.impayer);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final qrParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final nomParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final phoneParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final adresseParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final impayerParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final object = Client(
              id: idParam,
              qr: qrParam,
              nom: nomParam,
              phone: phoneParam,
              adresse: adresseParam,
              description: descriptionParam,
              impayer: impayerParam);
          obx_int.InternalToManyAccess.setRelInfo<Client>(
              object.factures,
              store,
              obx_int.RelInfo<Facture>.toOneBacklink(
                  4, object.id, (Facture srcObject) => srcObject.client));
          return object;
        }),
    Facture: obx_int.EntityDefinition<Facture>(
        model: _entities[3],
        toOneRelations: (Facture object) => [object.client],
        toManyRelations: (Facture object) => {
              obx_int.RelInfo<LigneFacture>.toOneBacklink(3, object.id,
                      (LigneFacture srcObject) => srcObject.facture):
                  object.lignesFacture
            },
        getId: (Facture object) => object.id,
        setId: (Facture object, int id) {
          object.id = id;
        },
        objectToFB: (Facture object, fb.Builder fbb) {
          final qrOffset = fbb.writeString(object.qr);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, qrOffset);
          fbb.addInt64(2, object.date.millisecondsSinceEpoch);
          fbb.addInt64(3, object.client.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final dateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final qrParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = Facture(id: idParam, date: dateParam, qr: qrParam);
          object.client.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.client.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<Facture>(
              object.lignesFacture,
              store,
              obx_int.RelInfo<LigneFacture>.toOneBacklink(
                  3, object.id, (LigneFacture srcObject) => srcObject.facture));
          return object;
        }),
    LigneFacture: obx_int.EntityDefinition<LigneFacture>(
        model: _entities[4],
        toOneRelations: (LigneFacture object) =>
            [object.produit, object.facture],
        toManyRelations: (LigneFacture object) => {},
        getId: (LigneFacture object) => object.id,
        setId: (LigneFacture object, int id) {
          object.id = id;
        },
        objectToFB: (LigneFacture object, fb.Builder fbb) {
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.produit.targetId);
          fbb.addInt64(2, object.facture.targetId);
          fbb.addInt64(3, object.quantite);
          fbb.addFloat64(4, object.prixUnitaire);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final quantiteParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final prixUnitaireParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final object = LigneFacture(
              id: idParam,
              quantite: quantiteParam,
              prixUnitaire: prixUnitaireParam);
          object.produit.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.produit.attach(store);
          object.facture.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.facture.attach(store);
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Fournisseur] entity fields to define ObjectBox queries.
class Fournisseur_ {
  /// See [Fournisseur.id].
  static final id =
      obx.QueryIntegerProperty<Fournisseur>(_entities[0].properties[0]);

  /// See [Fournisseur.qr].
  static final qr =
      obx.QueryStringProperty<Fournisseur>(_entities[0].properties[1]);

  /// See [Fournisseur.nom].
  static final nom =
      obx.QueryStringProperty<Fournisseur>(_entities[0].properties[2]);

  /// See [Fournisseur.phone].
  static final phone =
      obx.QueryStringProperty<Fournisseur>(_entities[0].properties[3]);

  /// See [Fournisseur.adresse].
  static final adresse =
      obx.QueryStringProperty<Fournisseur>(_entities[0].properties[4]);

  /// See [Fournisseur.dateCreation].
  static final dateCreation =
      obx.QueryDateProperty<Fournisseur>(_entities[0].properties[5]);

  /// See [Fournisseur.derniereModification].
  static final derniereModification =
      obx.QueryDateProperty<Fournisseur>(_entities[0].properties[6]);

  /// see [Fournisseur.produits]
  static final produits =
      obx.QueryRelationToMany<Fournisseur, Produit>(_entities[0].relations[0]);
}

/// [Produit] entity fields to define ObjectBox queries.
class Produit_ {
  /// See [Produit.id].
  static final id =
      obx.QueryIntegerProperty<Produit>(_entities[1].properties[0]);

  /// See [Produit.qr].
  static final qr =
      obx.QueryStringProperty<Produit>(_entities[1].properties[1]);

  /// See [Produit.image].
  static final image =
      obx.QueryStringProperty<Produit>(_entities[1].properties[2]);

  /// See [Produit.nom].
  static final nom =
      obx.QueryStringProperty<Produit>(_entities[1].properties[3]);

  /// See [Produit.description].
  static final description =
      obx.QueryStringProperty<Produit>(_entities[1].properties[4]);

  /// See [Produit.prixAchat].
  static final prixAchat =
      obx.QueryDoubleProperty<Produit>(_entities[1].properties[5]);

  /// See [Produit.prixVente].
  static final prixVente =
      obx.QueryDoubleProperty<Produit>(_entities[1].properties[6]);

  /// See [Produit.stock].
  static final stock =
      obx.QueryDoubleProperty<Produit>(_entities[1].properties[7]);

  /// See [Produit.stockUpdate].
  static final stockUpdate =
      obx.QueryDateProperty<Produit>(_entities[1].properties[8]);

  /// See [Produit.stockinit].
  static final stockinit =
      obx.QueryDoubleProperty<Produit>(_entities[1].properties[9]);

  /// See [Produit.dateCreation].
  static final dateCreation =
      obx.QueryDateProperty<Produit>(_entities[1].properties[10]);

  /// See [Produit.datePeremption].
  static final datePeremption =
      obx.QueryDateProperty<Produit>(_entities[1].properties[11]);

  /// See [Produit.derniereModification].
  static final derniereModification =
      obx.QueryDateProperty<Produit>(_entities[1].properties[12]);

  /// See [Produit.minimStock].
  static final minimStock =
      obx.QueryDoubleProperty<Produit>(_entities[1].properties[13]);
}

/// [Client] entity fields to define ObjectBox queries.
class Client_ {
  /// See [Client.id].
  static final id =
      obx.QueryIntegerProperty<Client>(_entities[2].properties[0]);

  /// See [Client.qr].
  static final qr = obx.QueryStringProperty<Client>(_entities[2].properties[1]);

  /// See [Client.nom].
  static final nom =
      obx.QueryStringProperty<Client>(_entities[2].properties[2]);

  /// See [Client.phone].
  static final phone =
      obx.QueryStringProperty<Client>(_entities[2].properties[3]);

  /// See [Client.adresse].
  static final adresse =
      obx.QueryStringProperty<Client>(_entities[2].properties[4]);

  /// See [Client.description].
  static final description =
      obx.QueryStringProperty<Client>(_entities[2].properties[5]);

  /// See [Client.impayer].
  static final impayer =
      obx.QueryDoubleProperty<Client>(_entities[2].properties[6]);

  /// see [Client.factures]
  static final factures =
      obx.QueryBacklinkToMany<Facture, Client>(Facture_.client);
}

/// [Facture] entity fields to define ObjectBox queries.
class Facture_ {
  /// See [Facture.id].
  static final id =
      obx.QueryIntegerProperty<Facture>(_entities[3].properties[0]);

  /// See [Facture.qr].
  static final qr =
      obx.QueryStringProperty<Facture>(_entities[3].properties[1]);

  /// See [Facture.date].
  static final date =
      obx.QueryDateProperty<Facture>(_entities[3].properties[2]);

  /// See [Facture.client].
  static final client =
      obx.QueryRelationToOne<Facture, Client>(_entities[3].properties[3]);

  /// see [Facture.lignesFacture]
  static final lignesFacture =
      obx.QueryBacklinkToMany<LigneFacture, Facture>(LigneFacture_.facture);
}

/// [LigneFacture] entity fields to define ObjectBox queries.
class LigneFacture_ {
  /// See [LigneFacture.id].
  static final id =
      obx.QueryIntegerProperty<LigneFacture>(_entities[4].properties[0]);

  /// See [LigneFacture.produit].
  static final produit =
      obx.QueryRelationToOne<LigneFacture, Produit>(_entities[4].properties[1]);

  /// See [LigneFacture.facture].
  static final facture =
      obx.QueryRelationToOne<LigneFacture, Facture>(_entities[4].properties[2]);

  /// See [LigneFacture.quantite].
  static final quantite =
      obx.QueryIntegerProperty<LigneFacture>(_entities[4].properties[3]);

  /// See [LigneFacture.prixUnitaire].
  static final prixUnitaire =
      obx.QueryDoubleProperty<LigneFacture>(_entities[4].properties[4]);
}
