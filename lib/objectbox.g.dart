// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '1/objectBox/Entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 1607491491677936871),
      name: 'Fournisseur',
      lastPropertyId: const obx_int.IdUid(5, 7832871292473157035),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4128254359789025437),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8758188655905488373),
            name: 'qr',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 414205311028485250),
            name: 'nom',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8919268741099517413),
            name: 'phone',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7832871292473157035),
            name: 'adresse',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(1, 2832941486252609678),
            name: 'produits',
            targetId: const obx_int.IdUid(2, 8606136097133066204))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 8606136097133066204),
      name: 'Produit',
      lastPropertyId: const obx_int.IdUid(8, 4773469945258199278),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3899042760461107286),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1144798314351403869),
            name: 'qr',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 257039154436617685),
            name: 'image',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8034655794147681628),
            name: 'nom',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 9164585532905782971),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6533552764826989296),
            name: 'prixAchat',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 8989117107807645988),
            name: 'prixVente',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 4773469945258199278),
            name: 'stock',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'fournisseurs', srcEntity: 'Fournisseur', srcField: '')
      ])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(2, 8606136097133066204),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(1, 2832941486252609678),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Fournisseur: obx_int.EntityDefinition<Fournisseur>(
        model: _entities[0],
        toOneRelations: (Fournisseur object) => [],
        toManyRelations: (Fournisseur object) => {
              obx_int.RelInfo<Fournisseur>.toMany(1, object.id): object.produits
            },
        getId: (Fournisseur object) => object.id,
        setId: (Fournisseur object, int id) {
          object.id = id;
        },
        objectToFB: (Fournisseur object, fb.Builder fbb) {
          final qrOffset =
              object.qr == null ? null : fbb.writeString(object.qr!);
          final nomOffset = fbb.writeString(object.nom);
          final phoneOffset =
              object.phone == null ? null : fbb.writeString(object.phone!);
          final adresseOffset =
              object.adresse == null ? null : fbb.writeString(object.adresse!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, qrOffset);
          fbb.addOffset(2, nomOffset);
          fbb.addOffset(3, phoneOffset);
          fbb.addOffset(4, adresseOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final qrParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nomParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final phoneParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final adresseParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final object = Fournisseur(
              id: idParam,
              qr: qrParam,
              nom: nomParam,
              phone: phoneParam,
              adresse: adresseParam);
          obx_int.InternalToManyAccess.setRelInfo<Fournisseur>(object.produits,
              store, obx_int.RelInfo<Fournisseur>.toMany(1, object.id));
          return object;
        }),
    Produit: obx_int.EntityDefinition<Produit>(
        model: _entities[1],
        toOneRelations: (Produit object) => [],
        toManyRelations: (Produit object) => {
              obx_int.RelInfo<Fournisseur>.toManyBacklink(1, object.id):
                  object.fournisseurs
            },
        getId: (Produit object) => object.id,
        setId: (Produit object, int id) {
          object.id = id;
        },
        objectToFB: (Produit object, fb.Builder fbb) {
          final qrOffset =
              object.qr == null ? null : fbb.writeString(object.qr!);
          final imageOffset =
              object.image == null ? null : fbb.writeString(object.image!);
          final nomOffset = fbb.writeString(object.nom);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, qrOffset);
          fbb.addOffset(2, imageOffset);
          fbb.addOffset(3, nomOffset);
          fbb.addOffset(4, descriptionOffset);
          fbb.addFloat64(5, object.prixAchat);
          fbb.addFloat64(6, object.prixVente);
          fbb.addInt64(7, object.stock);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final qrParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final imageParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final nomParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12);
          final prixAchatParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final prixVenteParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final stockParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          final object = Produit(
              id: idParam,
              qr: qrParam,
              image: imageParam,
              nom: nomParam,
              description: descriptionParam,
              prixAchat: prixAchatParam,
              prixVente: prixVenteParam,
              stock: stockParam);
          obx_int.InternalToManyAccess.setRelInfo<Produit>(object.fournisseurs,
              store, obx_int.RelInfo<Fournisseur>.toManyBacklink(1, object.id));
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Fournisseur] entity fields to define ObjectBox queries.
class Fournisseur_ {
  /// See [Fournisseur.id].
  static final id =
      obx.QueryIntegerProperty<Fournisseur>(_entities[0].properties[0]);

  /// See [Fournisseur.qr].
  static final qr =
      obx.QueryStringProperty<Fournisseur>(_entities[0].properties[1]);

  /// See [Fournisseur.nom].
  static final nom =
      obx.QueryStringProperty<Fournisseur>(_entities[0].properties[2]);

  /// See [Fournisseur.phone].
  static final phone =
      obx.QueryStringProperty<Fournisseur>(_entities[0].properties[3]);

  /// See [Fournisseur.adresse].
  static final adresse =
      obx.QueryStringProperty<Fournisseur>(_entities[0].properties[4]);

  /// see [Fournisseur.produits]
  static final produits =
      obx.QueryRelationToMany<Fournisseur, Produit>(_entities[0].relations[0]);
}

/// [Produit] entity fields to define ObjectBox queries.
class Produit_ {
  /// See [Produit.id].
  static final id =
      obx.QueryIntegerProperty<Produit>(_entities[1].properties[0]);

  /// See [Produit.qr].
  static final qr =
      obx.QueryStringProperty<Produit>(_entities[1].properties[1]);

  /// See [Produit.image].
  static final image =
      obx.QueryStringProperty<Produit>(_entities[1].properties[2]);

  /// See [Produit.nom].
  static final nom =
      obx.QueryStringProperty<Produit>(_entities[1].properties[3]);

  /// See [Produit.description].
  static final description =
      obx.QueryStringProperty<Produit>(_entities[1].properties[4]);

  /// See [Produit.prixAchat].
  static final prixAchat =
      obx.QueryDoubleProperty<Produit>(_entities[1].properties[5]);

  /// See [Produit.prixVente].
  static final prixVente =
      obx.QueryDoubleProperty<Produit>(_entities[1].properties[6]);

  /// See [Produit.stock].
  static final stock =
      obx.QueryIntegerProperty<Produit>(_entities[1].properties[7]);
}
